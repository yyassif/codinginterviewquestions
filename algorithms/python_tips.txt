# how to remove non-alphabetical words 1
''.join([i for i in s if i.isalpha()])

# how to remove non-alphabetical words 2
import re
re.sub("[^a-zA-Z]+", "", "ABC12abc345def")

#sort dictionary or map by value
sorted(d.items(), key=lambda x: x[1])
sorted(d.items(), key=lambda x: x[1], reverse=True)

#sort map by key
sorted(map)

#sort map by value 1
import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(0))

#sort map by value 2
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=lambda kv: kv[1])

#sort map by value 3
import collections
sorted_dict = collections.OrderedDict(sorted_x)

#sort array in reverse
print(sorted(arr, reverse=True))

#initalize array with fixed size and type
a=[]
a[2] = 2 #error
a = [int] *10
a[2] = 2 #no error

#bit manipulation
https://wiki.python.org/moin/BitManipulation

#return index of character in a string
string.index(char)

#char to ascii 
ord(char)

#ascii to char
chr( num)

#create set
a = set()

#convert set to list
a = set()
b = list(a)

#count frequencies of lists, dicts
https://pymotw.com/2/collections/counter.html
import collections
>>> nums = [1,1,1,2,2,3]
>>> count = collections.Counter(nums)
>>>Counter({1: 3, 2: 2, 3: 1})

#heap 
https://docs.python.org/3.0/library/heapq.html
>>> from heapq import heappush, heappop
>>> heap = []
>>> data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]
>>> for item in data:
...     heappush(heap, item)
>>> ordered = []
>>> while heap:
...     ordered.append(heappop(heap))
>>> ordered
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> data.sort()
>>> data == ordered
True

#heap que - nlargest
>>> import heapq
>>> nums= [1,1,1,2,2,3]
>>> import collections
>>> count = collections.Counter(nums)
>>> import heapq
>>> heapq.nlargest(2, count.keys(), key=count.get)
[1, 2]
