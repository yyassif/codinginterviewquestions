# how to remove non-alphabetical words 1
''.join([i for i in s if i.isalpha()])

# how to remove non-alphabetical words 2
import re
re.sub("[^a-zA-Z]+", "", "ABC12abc345def")

#sort dictionary or map by value
sorted(d.items(), key=lambda x: x[1])
sorted(d.items(), key=lambda x: x[1], reverse=True)

#sort map by key
sorted(map)

#sort map by value 1
import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(0))

#sort map by value 2
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=lambda kv: kv[1])

#sort map by value 3
import collections
sorted_dict = collections.OrderedDict(sorted_x)

#sort array in reverse
print(sorted(arr, reverse=True))

#initalize array with fixed size and type
a=[]
a[2] = 2 #error
a = [int] *10
a[2] = 2 #no error

#bit manipulation
https://wiki.python.org/moin/BitManipulation

#return index of character in a string

[print without a new line]
print("Good Morning!", end = '')

string.index(char)

#char to ascii 
ord(char)

#ascii to char
chr( num)

#create set
a = set()

#convert set to list
a = set()
b = list(a)

#count frequencies of lists, dicts
https://pymotw.com/2/collections/counter.html
import collections
>>> nums = [1,1,1,2,2,3]
>>> count = collections.Counter(nums)
>>>Counter({1: 3, 2: 2, 3: 1})

#heap 
https://docs.python.org/3.0/library/heapq.html
>>> from heapq import heappush, heappop
>>> heap = []
>>> data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]
>>> for item in data:
...     heappush(heap, item)
>>> ordered = []
>>> while heap:
...     ordered.append(heappop(heap))
>>> ordered
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> data.sort()
>>> data == ordered
True

#heap que - nlargest
>>> import heapq
>>> nums= [1,1,1,2,2,3]
>>> import collections
>>> count = collections.Counter(nums)
>>> import heapq
>>> heapq.nlargest(2, count.keys(), key=count.get)
[1, 2]

#copy lists and randomly shuffle
>>> a=[1,2,3,4,5]
>>> import random
>>> random.shuffle(a)
>>> a
[1, 5, 4, 2, 3]
>>> b = a.copy()
>>> b
[1, 5, 4, 2, 3]
>>> random.shuffle(b) #caution - shuffle shuffles array in place. it returns None
>>> b
[3, 1, 5, 2, 4]

#random.sample - randomly choose n number of items from a list
>>> random.sample(a,3)
[2, 1, 5]
>>> random.sample(a,5)
[1, 2, 4, 3, 5]

[initialize hash map]
d = {}
 for i in xrange(4000000):
     d[i] = None
 # 722ms

 d = dict(itertools.izip(xrange(4000000), itertools.repeat(None)))
 # 634ms

 dict.fromkeys(xrange(4000000))
 # 558ms

 s = set(xrange(4000000))
 dict.fromkeys(s)
 # Not including set construction 353ms
 
 #reshape(-1,1)
 convert array to have single feature
 e.g. arr = [[1,2,3,4],[5,6,7,8]].reshape(-1,1) ->
array([[ 1],
   [ 2],
   [ 3],
   [ 4],
   [ 5],
   [ 6],
   [ 7],
   [ 8])

#pair two arrays into one list (x,y), (2,3)....
year_sale = [[x, y] for x, y in zip(train_top15['YearBuilt'],train_top15['SalePrice'])]

#sum dataframe
>>> a
[[1, 1, 1, 1], [2, 2, 2, 2]]
df = pd.DataFrame(a)
>>> df.sum(axis=0)
0    3
1    3
2    3
3    3
dtype: int64

>>> df
   0  1  2  3
0  1  1  1  1
1  2  2  2  2
>>> df.sum(axis=1)
0    4
1    8
dtype: int64

#map using func and list
result = map(lambda x: x + x, numbers) 
print(list(result)) 
output:
{2, 4, 6, 8}

https://www.geeksforgeeks.org/python-map-function/

#str.find(pattern)
return index of the pattern
https://www.programiz.com/python-programming/methods/string/find

* combine map and find
pattern = "abba"
str = "dog cat cat dog"
https://leetcode.com/problems/word-pattern/discuss/471173/Pythonic-sol.-based-on-native-map-zip-and-all.-run-time-85%2B
struct_pat = map( pattern.find ,pattern)

#python all
https://www.programiz.com/python-programming/methods/built-in/all
check if list evaluates to true 
list = [true, false]=> false
list = [1,1]=> true
all(list)

#find unique values from a list
https://www.geeksforgeeks.org/python-get-unique-values-list/
set(list)
numpy.unique(list)

#quotient, remainder = divmod(x,y)
get quotient and remainder

#bisect, bisect left and right
https://www.geeksforgeeks.org/bisect-algorithm-functions-in-python/
a= [1,2,2,3]
bisect_left(a,2) returns 1
bisect_right(a,2) returns 3

#filter
filtered = filter(fun, sequence) #fun=function that returns true or false based on a parameter
#sequence - array of values
#https://www.geeksforgeeks.org/filter-in-python/

#how to create n x x matrix properly
# DO NOT USE m=[[0]*n]*n as it copies rows and you lose data
n=5
m=[[0 for _ in range(n)] for _ in range(n)]
[[0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0]]
#check if a string consist of numbers
>>> a="123"
>>> a.isnumeric()
True

#replace chars using sub
>>> a
'ajfkdjf ; kdjfkdjfj , jdfkdf? kjsdkfjksdfkj'
>>> rs = sub("[^a-z]", " ", a)
>>> rs
'ajfkdjf   kdjfkdjfj   jdfkdf  kjsdkfjksdfkj'

###combinations
from itertools import combinations 
  
def rSubset(arr, r): 
  
    # return list of all subsets of length r 
    # to deal with duplicate subsets use  
    # set(list(combinations(arr, r))) 
    return list(combinations(arr, r)) 
  
# Driver Function 
if __name__ == "__main__": 
    arr = [1, 2, 3, 4] 
    r = 2
    print rSubset(arr, r) 
Output:

[[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]

#max heap in python ( default is min-heap. heappop pops out smallest in heap)
import heapq
listForTree = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]    
heapq.heapify(listForTree)             # for a min heap
heapq._heapify_max(listForTree)        # for a maxheap!!
If you then want to pop elements, use:

heapq.heappop(minheap)      # pop from minheap
heapq._heappop_max(maxheap) # pop from maxheap

#python inheritance, abstract classes


# setattr
https://www.programiz.com/python-programming/methods/built-in/setattr
class Person:
    name = 'Adam'
    
p = Person()
print('Before modification:', p.name)

# setting name to 'John'
setattr(p, 'name', 'John')

print('After modification:', p.name)

# // does not truncate toward zero
>>> 6//-132
-1
>>> 3//-2
-2
